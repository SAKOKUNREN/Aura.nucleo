    def text_to_speech_google(self, text, language="es-ES"):
        """Convierte texto a voz usando Google Cloud TTS."""
        try:
            synthesis_input = tts.SynthesisInput(text=text)
            voice = tts.VoiceSelectionParams(language_code=language, ssml_gender=tts.SsmlVoiceGender.FEMALE)
            audio_config = tts.AudioConfig(audio_encoding=tts.AudioEncoding.LINEAR16)
            response = tts_client.synthesize_speech(input=synthesis_input, voice=voice, audio_config=audio_config)
            logger.info("Text converted to speech successfully")
            return response.audio_content
        except Exception as e:
            logger.error(f"Error converting text to speech: {e}")
            return None

    def speech_to_text_google(self, audio_content,language="es-ES"):
        """Convierte audio a texto usando Google Cloud Speech-to-Text."""
        try:
            config = speech.RecognitionConfig(
                auto_decoding=True,
                language_codes=[language],
            )
            request_config = speech.RecognizeRequest.config
            request_config = config

            request = speech.RecognizeRequest(
                audio=speech.RecognitionAudio(content=audio_content),
                config=request_config
            )
            response = speech_client.recognize(request=request)
            if len(response.results) > 0 :
                logger.info("Speech converted to text successfully")
                return response.results[0].alternatives[0].transcript
            else:
                logger.warning("No speech recognized")
                return "No se pudo reconocer el audio"
        except Exception as e:
            logger.error(f"Error converting speech to text: {e}")
            return "Error al reconocer el audio"

    def analyze_image(self, image_content):
        """Analiza una imagen utilizando Google Cloud Vision API"""
        try:
            image = vision.Image(content=image_content)
            response = vision_client.annotate_image({
                'image': image,
                'features':[
                    {'type': vision.Feature.Type.LABEL_DETECTION},
                    {'type': vision.Feature.Type.TEXT_DETECTION}
                    ]
                })
            logger.info("Image analyzed successfully")
            return MessageToJson(response)
        except Exception as e:
            logger.error(f"Error analyzing image {e}")
            return "Error al analizar la imagen"
